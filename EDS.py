from Crypto import Random
from Crypto.PublicKey import RSA
import base64


class EDS():
    def __init__(self):
        # key length must be a multiple of 256 and >= 1024
        self.modulus_length = 256*4
        self.privatekey = RSA.generate(self.modulus_length, Random.new().read)
        self.publickey = self.privatekey.publickey()


    def encrypt_message(self,a_message , publickey):
        """This function gets the message and public key generated by Class EDS
                to encrypt the message
        """
        encrypted_msg = publickey.encrypt(a_message, 32)[0]
        encoded_encrypted_msg = base64.b64encode(encrypted_msg)
        return encoded_encrypted_msg

    def decrypt_message(self,encoded_encrypted_msg, privatekey):
        """This function gets the encoded message and private key generated by Class EDS
                to decrypt the message
        """
        decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
        decoded_decrypted_msg = privatekey.decrypt(decoded_encrypted_msg)
        return decoded_decrypted_msg



